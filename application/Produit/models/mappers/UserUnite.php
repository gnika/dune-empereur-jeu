<?phpclass Produit_Model_Mapper_UserUnite{    protected $_dbTable;    protected $_auth;            public function init()     {            }        public function setDbTable($dbTable)    {        if (is_string($dbTable)) {            $dbTable = new $dbTable();        }        if (!$dbTable instanceof Zend_Db_Table_Abstract) {            throw new Exception('Invalid table data gateway provided');        }        $this->_dbTable = $dbTable;        return $this;    }    public function getDbTable()    {        if (null === $this->_dbTable) {            $this->setDbTable('Produit_Model_DbTable_UserUnite');        }        return $this->_dbTable;    }        public function verifPrix()    {            }        public function save(Produit_Model_UserUnite $Unite, $item)    {           $quantiteactu=0;        //print_r($item);        $this->_auth = Zend_Auth::getInstance();        $member = $this->_auth->getIdentity();        if ($member == null) {            die('error');        };                $duree=time()+($item['quantity']*$item['duree']);        $query      = $this -> getDbTable()     -> select()                                                -> where( 'uu_produit_unite_id= "'.$item['id'].'" and uu_user_id="'.$member->cuu_id.'"' );         $row  = $this->getDbTable()->fetchRow( $query );        if(count($row)!=0)        {  $quantiteactu = $row->uu_quantite;            if ($row->uu_duree!=0){                $message='vous devez attendre la fin du recrutement de cet unitÃ© pour en recruter d\'autres de meme type';                Application_Common::addSystemError($message);                return false;            }        }          $decrement_user= new Customer_Model_Mapper_User();          $user= new Customer_Model_User();          $decrement_user->find($member->cuu_id, $user);          if($decrement_user->achat($user, $item)===false){            $message='ressources insuffisantes pour satisfaire tout vos besoins.';            Application_Common::addSystemError($message);            return false;        }          $decrement_user->save($user);          $Unite      ->setUserId($user->getId() )                    ->setProduitUniteId($item['id'])                    ->setDuree($duree)                    ->setQuantite($quantiteactu + $item['quantity'])                    ->setEnCours($item['quantity']);                                  if(count($row)!= 0)            {                $data = array(                                  'uu_duree'              =>  $duree,                                'uu_en_cours'           =>  $Unite->getEnCours()                            );                $this->getDbTable()->update($data,             array('uu_user_id  = ?' => $row->uu_user_id,            'uu_produit_unite_id = ?' =>$row->uu_produit_unite_id));            }            else            {                $data = array(  'uu_user_id'             => $member->cuu_id,                                'uu_produit_unite_id'    => $item['id'],                                'uu_quantite'            => 0,                                'uu_duree'              =>  $duree,                                'uu_en_cours'           =>  $item['quantity']                               );                $this->getDbTable()->insert($data);            }            $Basket = new Produit_Model_Basket();            $Basket->removeProduct($item['id']);              }                    public function fetchAllbyUser($id, $unite=null)    {        if($unite==null)		{			$query      = $this -> getDbTable()     -> select()                                                -> setIntegrityCheck(false)                                                -> from( array( 'uu' => 'user_unite' ),                                                         array( 'uu.uu_produit_unite_id',                                                                'uu.uu_quantite',                                                                 'uu.uu_user_id',                                                                'uu.uu_duree',                                                                 'uu.uu_en_cours'                                                              )                                                       )                                                -> join(array('pa' => 'produit_unite'),                                                        'pa.pa_id = uu.uu_produit_unite_id'                                                       )                                                -> where( 'uu.uu_user_id= "'.$id.'"' );		}		else		{			$tab='';			foreach($unite as $cle=>$value){				$tab.='"'.$cle.'" OR uu_produit_unite_id = ';			}			$tab=substr($tab,0,-26);            $tabexil= 'uu.uu_user_id= "'.$id.'" AND ( uu.uu_produit_unite_id = '.$tab.' ) ' ;			$query      = $this -> getDbTable()     -> select()                                                -> setIntegrityCheck(false)                                                -> from( array( 'uu' => 'user_unite' ),                                                         array( 'uu.uu_produit_unite_id',                                                                'uu.uu_quantite',                                                                 'uu.uu_user_id',                                                                'uu.uu_duree',                                                                 'uu.uu_en_cours'                                                              )                                                       )                                                -> join(array('pa' => 'produit_unite'),                                                        'pa.pa_id = uu.uu_produit_unite_id'                                                       )                                                -> where( $tabexil );		}        $resultSet  = $this->getDbTable()->fetchAll( $query );                     if (!$resultSet) {            return;        }                $entree=array();        $entreefinal=array();        foreach ($resultSet as $row) {                   $entree['uu_user_id']=$row->uu_user_id;            $entree['uu_produit_unite_id']=$row->uu_produit_unite_id;            $entree['uu_en_cours']=$row->uu_en_cours;            $entree['uu_duree']=$row->uu_duree;            $entree['uu_quantite']=$row->uu_quantite;            $entree['pu_titre']=$row->pa_titre;            $entree['pu_image']=$row->pa_image;                 $entree['pu_attaque']= $row->pa_attaque;            $entree['pu_defense']= $row->pa_defense;            $entree['pu_magie']= $row->pa_magie;            $entree['pu_pillage']= $row->pa_pillage;						if($unite !=null){				if($row->uu_quantite < $unite[$row->uu_produit_unite_id]){					$message='impossible d\'envoyer autant de troupes a la guerre';					Application_Common::addSystemError($message);					return false;				}				else				$entree['uu_quantite']=$unite[$row->uu_produit_unite_id];			}            $entreefinal[]=$entree;        }        return $entreefinal;    }		public function destruct($unite, $condition, $magie)	{            $array=array();            if($condition >100)                $limit=20;            if($condition < 50 && $condition > 20)                $limit=15;            if($condition < 20 && $condition > 0)                $limit=10;            if($condition < 0)                $limit=10;            if($magie>0)				$limit-=3;                $arPerte=array();                foreach($unite as $unit)                {                    $tauxperte=$limit-$unit['pu_defense'];                    if($tauxperte< 0)                        $tauxperte=0;                   $perte= rand(0,$tauxperte);                   $unitefin=$unit['uu_quantite']-$perte;                   if($unitefin<0) $unitefin=0;                   if($unitefin==0)                    $this->getDbTable->delete("user_unite", " uu_user_id = '".$unit['uu_user_id']."' AND  uu_produit_unite_id = '".$unit['uu_produit_unite_id']."'");                    else{                        $data=array('uu_quantite'=>$pertefin);                        $this->getDbTable()->update($data,                         array('uu_user_id  = ?' => $unit['uu_user_id'],                        'uu_produit_unite_id = ?' =>$unit['uu_produit_unite_id']));                    }                                        $arPerte[$unit]=$unitefin;                }                return $arPerte;	}            }